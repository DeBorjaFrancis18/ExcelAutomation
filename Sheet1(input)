Option Explicit
Private Sub Worksheet_Change(ByVal Destination As Range)
Dim DelimiterType As String
Dim rngDropdown As Range
Dim oldValue As String
Dim newValue As String
DelimiterType = vbCrLf
If Destination.Count > 1 Then Exit Sub

On Error Resume Next
Set rngDropdown = Cells.SpecialCells(xlCellTypeAllValidation)
On Error GoTo exitError

If rngDropdown Is Nothing Then GoTo exitError

If Intersect(Destination, rngDropdown) Is Nothing Then
   'do nothing
Else
  Application.EnableEvents = False
  newValue = Destination.Value
  Application.Undo
  oldValue = Destination.Value
  Destination.Value = newValue
    If oldValue = "" Then
      'do nothing
    Else
      If newValue = "" Then
        'do nothing
      Else
        Destination.Value = oldValue & DelimiterType & newValue
        ' add new value with delimiter
      End If
    End If
End If

exitError:
  Application.EnableEvents = True
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub






Sub Generate_Table()

Dim x As String
Dim y As String
Dim z As String
Dim Splitx() As String
Dim Splity() As String
Dim Splitz() As String
Dim uniqueItems As Collection
Dim item As Variant
Dim i As Integer

x = Sheets("Change Request -new").Cells(12, 2).Value
y = Sheets("Change Request -new").Cells(14, 2).Value
z = Sheets("Change Request -new").Cells(16, 2).Value

Message = "x: " & x & vbCrLf & "y: " & y & vbCrLf & "z: " & z
MsgBox Message

Splitx = Split(x, "/")

Set uniqueItems = New Collection

On Error Resume Next
For i = LBound(Splitx) To UBound(Splitx)
    uniqueItems.Add Splitx(i), Splitx(i)
Next i
On Error GoTo 0

For Each item In uniqueItems
    MsgBox item

End Sub






Sub Generate_Table()

Dim x As String
Dim y As String
Dim z As String
Dim Splitx() As String
Dim Splity() As String
Dim Splitz() As String
Dim uniqueItems As Collection
Dim item As Variant
Dim i As Integer

x = Sheets("Change Request -new").Cells(12, 2).Value
y = Sheets("Change Request -new").Cells(14, 2).Value
z = Sheets("Change Request -new").Cells(16, 2).Value

Message = "x: " & x & vbCrLf & "y: " & y & vbCrLf & "z: " & z
MsgBox Message

Splitx = Split(x, "/")

Set uniqueItems = New Collection

On Error Resume Next
For i = LBound(Splitx) To UBound(Splitx)
    uniqueItems.Add Splitx(i), Splitx(i)
Next i
On Error GoTo 0

counter = 1
For Each item In uniqueItems
    MsgBox "Item " & counter & ": " & item
    counter = counter + 1
Next item

End Sub



"Ship Point/Ship-to/Unl.Point/LEOService/Sval
Ship Point/Ship-to/LEOService/Sval
Country/Ship-to/LEOService/Sval
Ship Point/Sold-to pt/LEOService/Sval"






Sub Generate_Table()

Dim x As String
Dim y As String
Dim z As String
Dim Splitx() As String
Dim Splity() As String
Dim Splitz() As String
Dim uniqueItems As Collection
Dim item As Variant
Dim i As Integer
Dim j As Integer
Dim TempSplit() As String


x = Sheets("Change Request -new").Cells(12, 2).Value
y = Sheets("Change Request -new").Cells(14, 2).Value
z = Sheets("Change Request -new").Cells(16, 2).Value

Message = "x: " & x & vbCrLf & "y: " & y & vbCrLf & "z: " & z
MsgBox Message

Splitx = Split(x, "/")

Set uniqueItems = New Collection

On Error Resume Next
For i = LBound(Splitx) To UBound(Splitx)
    If InStr(Splitx(i), vbCrLf) > 0 Then
    TempSplit = Split(Splitx(i), vbCrLf)
    For j = LBound(TemptSplit) To UBound(TempSplit)
        uniqueItems.Add Splitx(i), Splitx(i)
    Next j
    Else
        uniqueItems.Add TempSplit(i), TempSplit(i)
    End If
Next i
On Error GoTo 0

counter = 1
For Each item In uniqueItems
    MsgBox "Item " & counter & ": " & item
    counter = counter + 1
Next item

End Sub


Sub Generate_Table()

    Dim x As String
    Dim Splitx() As String
    Dim uniqueItems As Collection
    Dim item As Variant
    Dim i As Integer
    Dim j As Integer

    On Error GoTo ErrorHandler

    ' Read the value from the cell
    x = Sheets("Change Request -new").Cells(12, 2).Value

    ' Check if the value is not empty
    If x <> "" Then
        ' Display the value for diagnostic purposes
        MsgBox "Value of x: " & x

        ' Split the value by "/"
        Splitx = Split(x, "/")
        
        ' Initialize the collection
        Set uniqueItems = New Collection
        
        ' Loop through the split parts
        For i = LBound(Splitx) To UBound(Splitx)
            ' Check if the part contains a new line
            If InStr(Splitx(i), vbCrLf) > 0 Then
                ' Split further by new line
                Dim TempSplit() As String
                TempSplit = Split(Splitx(i), vbCrLf)
                ' Add each part to the collection
                For j = LBound(TempSplit) To UBound(TempSplit)
                    uniqueItems.Add TempSplit(j), CStr(TempSplit(j))
                Next j
            Else
                ' Add the part directly to the collection
                uniqueItems.Add Splitx(i), CStr(Splitx(i))
            End If
        Next i

        ' Display the unique items
        Dim counter As Integer
        counter = 1
        For Each item In uniqueItems
            MsgBox "Item " & counter & ": " & CStr(item)
            counter = counter + 1
        Next item
    Else
        MsgBox "Value of x is empty."
    End If

ExitSub:
    Exit Sub

ErrorHandler:
    MsgBox "Error: " & Err.Description
    Resume ExitSub

End Sub
Sub Generate_Table()

    Dim x As String
    Dim Splitx() As String
    Dim uniqueItems As Collection
    Dim item As Variant
    Dim i As Integer
    Dim j As Integer

    On Error GoTo ErrorHandler

    ' Read the value from the cell
    x = Sheets("Change Request -new").Cells(12, 2).Value

    ' Check if the value is not empty
    If x <> "" Then
        ' Display the value for diagnostic purposes
        MsgBox "Value of x: " & x

        ' Split the value by "/"
        Splitx = Split(x, "/")
        
        ' Initialize the collection
        Set uniqueItems = New Collection
        
        ' Loop through the split parts
        For i = LBound(Splitx) To UBound(Splitx)
            ' Check if the part contains a new line
            If InStr(Splitx(i), vbCrLf) > 0 Then
                ' Split further by new line
                Dim TempSplit() As String
                TempSplit = Split(Splitx(i), vbCrLf)
                ' Add each part to the collection
                For j = LBound(TempSplit) To UBound(TempSplit)
                    uniqueItems.Add TempSplit(j), CStr(TempSplit(j))
                Next j
            Else
                ' Add the part directly to the collection
                uniqueItems.Add Splitx(i), CStr(Splitx(i))
            End If
        Next i

        ' Display the unique items
        Dim counter As Integer
        counter = 1
        For Each item In uniqueItems
            MsgBox "Item " & counter & ": " & CStr(item)
            counter = counter + 1
        Next item
    Else
        MsgBox "Value of x is empty."
    End If

ExitSub:
    Exit Sub

ErrorHandler:
    MsgBox "Error: " & Err.Description
    Resume ExitSub

End Sub
Sub Generate_Table()

    Dim x As String
    Dim Splitx() As String
    Dim uniqueItems As Collection
    Dim item As Variant
    Dim i As Integer
    Dim j As Integer

    On Error GoTo ErrorHandler

    ' Read the value from the cell
    x = Sheets("Change Request -new").Cells(12, 2).Value

    ' Check if the value is not empty
    If x <> "" Then
        ' Display the value for diagnostic purposes
        MsgBox "Value of x: " & x

        ' Split the value by "/"
        Splitx = Split(x, "/")
        
        ' Initialize the collection
        Set uniqueItems = New Collection
        
        ' Loop through the split parts
        For i = LBound(Splitx) To UBound(Splitx)
            ' Check if the part contains a new line
            If InStr(Splitx(i), vbCrLf) > 0 Then
                ' Split further by new line
                Dim TempSplit() As String
                TempSplit = Split(Splitx(i), vbCrLf)
                ' Add each part to the collection
                For j = LBound(TempSplit) To UBound(TempSplit)
                    uniqueItems.Add TempSplit(j), CStr(TempSplit(j))
                Next j
            Else
                ' Add the part directly to the collection
                uniqueItems.Add Splitx(i), CStr(Splitx(i))
            End If
        Next i

        ' Display the unique items
        Dim counter As Integer
        counter = 1
        For Each item In uniqueItems
            MsgBox "Item " & counter & ": " & CStr(item)
            counter = counter + 1
        Next item
    Else
        MsgBox "Value of x is empty."
    End If

ExitSub:
    Exit Sub

ErrorHandler:
    MsgBox "Error: " & Err.Description
    Resume ExitSub








Sub Generate_Table()

    Dim x As String
    Dim Splitx() As String
    Dim uniqueItems As Collection
    Dim item As Variant
    Dim i As Integer
    Dim j As Integer

    On Error GoTo ErrorHandler

    ' Read the value from the cell
    x = Sheets("Change Request -new").Cells(12, 2).Value

    ' Check if the value is not empty
    If x <> "" Then
        ' Display the value for diagnostic purposes
        MsgBox "Value of x: " & x

        ' Split the value by "/"
        Splitx = Split(x, "/")
        
        ' Initialize the collection
        Set uniqueItems = New Collection
        
        ' Loop through the split parts
        For i = LBound(Splitx) To UBound(Splitx)
            ' Check if the part contains a new line
            If InStr(Splitx(i), vbCrLf) > 0 Then
                ' Split further by new line
                Dim TempSplit() As String
                TempSplit = Split(Splitx(i), vbCrLf)
                ' Add each part to the collection
                For j = LBound(TempSplit) To UBound(TempSplit)
                    uniqueItems.Add TempSplit(j), CStr(TempSplit(j))
                Next j
            Else
                ' Add the part directly to the collection
                uniqueItems.Add Splitx(i), CStr(Splitx(i))
            End If
        Next i

        ' Display the unique items
        Dim counter As Integer
        counter = 1
        For Each item In uniqueItems
            MsgBox "Item " & counter & ": " & CStr(item)
            counter = counter + 1
        Next item
    Else
        MsgBox "Value of x is empty."
    End If

ExitSub:
    Exit Sub

ErrorHandler:
    MsgBox "Error: " & Err.Description
    Resume ExitSub

End Sub
